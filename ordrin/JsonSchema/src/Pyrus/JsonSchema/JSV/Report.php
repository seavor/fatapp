<?php
/**
 * JSV: JSON Schema Validator
 * 
 * @fileOverview A JavaScript implementation of a extendable, fully compliant JSON Schema validator.
 * @author Gregory Beaver greg@chiaraquartet.net
 * @author Gary Court gary.court@gmail.com
 * @version 3.5
 * @see http://github.com/garycourt/uri-js Ported from JSV
 */

/*
 * Copyright 2010 Gary Court. All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 *    1. Redistributions of source code must retain the above copyright notice, this list of
 *       conditions and the following disclaimer.
 * 
 *    2. Redistributions in binary form must reproduce the above copyright notice, this list
 *       of conditions and the following disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * The views and conclusions contained in the software and documentation are those of the
 * authors and should not be interpreted as representing official policies, either expressed
 * or implied, of Gary Court or the JSON Schema specification.
 */

namespace Pyrus\JsonSchema\JSV;
/**
 * Reports are returned from validation methods to describe the result of a validation.
 * @see JSONSchema#validate
 * @see Environment#validate
 */
class Report
{
    /**
     * An array of {@link ValidationError} objects that define all the errors generated by the schema against the instance.
     * 
     * @name Report.prototype.errors
     * @type Array
     * @see Report#addError
     */
    protected $errors = array();

    /**
     * A hash table of every instance and what schemas were validated against it.
     * <p>
     * The key of each item in the table is the URI of the instance that was validated.
     * The value of this key is an array of strings of URIs of the schema that validated it.
     * </p>
     * 
     * @name Report.prototype.validated
     * @type Object
     * @see Report#registerValidation
     * @see Report#isValidatedBy
     */
    protected $validated = array();

    /**
     * If the report is generated by {@link Environment#validate}, this field is the generated instance.
     * 
     * @name Report.prototype.instance
     * @type JSONInstance
     * @see Environment#validate
     */
    protected $instance;

    /**
     * If the report is generated by {@link Environment#validate}, this field is the generated schema.
     * 
     * @name Report.prototype.schema
     * @type JSONSchema
     * @see Environment#validate
     */
    protected $schema;

    /**
     * If the report is generated by {@link Environment#validate}, this field is the schema's schema.
     * This value is the same as calling <code>schema.getSchema()</code>.
     * 
     * @name Report.prototype.schemaSchema
     * @type JSONSchema
     * @see Environment#validate
     * @see JSONSchema#getSchema
     */
    protected $schemaSchema;

    private $_checkVars = array('instance' => 1, 'schema' => 1, 'schemaSchema' => 1, 'validated' => 1, 'errors' => 1);

    function __clone()
    {
        $this->errors = array();
    }

    function __get($var)
    {
        if (!isset($this->_checkVars[$var]) || $var !== 'errors') {
            throw new Exception('Invalid Report variable requested: ' . $var);
        }
        return $this->$var;
    }

    function __set($var, $val)
    {
        if (!isset($this->_checkVars[$var])) {
            throw new Exception('Invalid Report variable requested: ' . $var);
        }
        $this->$var = $val;
    }
    
    /**
     * Adds a {@link ValidationException} object to the <a href="#errors"><code>errors</code></a> field.
     * 
     * @param {JSONInstance|String} instance The instance (or instance URI) that is invalid
     * @param {JSONSchema|String} schema The schema (or schema URI) that was validating the instance
     * @param {String} attr The attribute that failed to validated
     * @param {String} message A user-friendly message on why the schema attribute failed to validate the instance
     * @param {Any} details The value of the schema attribute
     */
    
    function addError($instance, $schema, $attr, $message, $details = '')
    {
        $err = new ValidationException($message);
        $err->uri = $instance instanceof JSONInstance ? $instance->getURI() : $instance;
        $err->schemaUri = $schema instanceof JSONInstance ? $schema->getURI() : $schema;
        $err->attribute = $attr;
        $err->details = $details;
        array_push($this->errors, $err);
    }
    
    /**
     * Registers that the provided instance URI has been validated by the provided schema URI. 
     * This is recorded in the <a href="#validated"><code>validated</code></a> field.
     * 
     * @param {String} uri The URI of the instance that was validated
     * @param {String} schemaUri The URI of the schema that validated the instance
     */
    
    function registerValidation($uri, $schemaUri) {
        if (!isset($this->validated[$uri])) {
            $this->validated[$uri] = array($schemaUri);
        } else {
            $this->validated[$uri][] = $schemaUri;
        }
    }
    
    /**
     * Returns if an instance with the provided URI has been validated by the schema with the provided URI. 
     * 
     * @param {String} uri The URI of the instance
     * @param {String} schemaUri The URI of a schema
     * @returns {Boolean} If the instance has been validated by the schema.
     */
    
    function isValidatedBy($uri, $schemaUri)
    {
        return isset($this->validated[$uri]) && in_array($schemaUri, $this->validated[$uri]);
    }
}